from aiogram import Router, F
from aiogram.types import Message, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
import os
from settings import settings

from backend import get_filepath_project
from models import async_session, PaymentRecord
from payments import (
    generate_payment_link,
    get_price_rub,
    check_payment_status,
    get_payment,
    build_receipt_text,
    set_file_id,
    get_file_id_for_payment,
)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
router_user = Router()
SUPPORT_LINK = settings.SUPPORT_LINK


class PurchaseState(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–∫—É–ø–∫–∏"""
    waiting_for_payment = State()


async def build_payment_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        InlineKeyboardMarkup: –ì–æ—Ç–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    """
    payment_url, payment_id = await generate_payment_link(
        user_id=user_id, 
        description="–û–ø–ª–∞—Ç–∞"
    )
    
    keyboard_buttons = [
        [InlineKeyboardButton(text=f"–û–ø–ª–∞—Ç–∞ {get_price_rub()} ‚ÇΩ", url=payment_url)],
        [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã", callback_data="check_all_payments")],
        [InlineKeyboardButton(text="–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", url=SUPPORT_LINK)],
    ]
    
    if payment_id:
        keyboard_buttons.insert(1, [
            InlineKeyboardButton(
                text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑", 
                callback_data=f"check_current:{payment_id}"
            )
        ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)


@router_user.message(F.text == "/start")
async def handle_start(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    keyboard = await build_payment_keyboard(message.from_user.id)
    
    await message.answer(
        "üìö –ö—É—Ä—Å–æ–≤–æ–π –ø—Ä–æ–µ–∫—Ç –ø–æ –º–æ–¥—É–ª—é 8: '–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö'\n"
        "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–∫–ª–∞–¥–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è\n\n"
        "üîπ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é:\n"
        "- –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –§–ò–û –Ω–∞ —Ç–∏—Ç—É–ª—å–Ω–æ–º –ª–∏—Å—Ç–µ\n\n"
        "üí≥ –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã:\n"
        "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è:\n"
        "   - –î–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É\n"
        "   - –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ —á–µ–∫–∞\n\n"
        "‚ùì –í–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã?\n"
        "–ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, –Ω–æ –ø—Ä–æ–µ–∫—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω - –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É",
        reply_markup=keyboard,
    )


async def send_project_file(
    chat_id: int, 
    payment_id: str, 
    receipt_text: str
) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    
    Args:
        chat_id: ID —á–∞—Ç–∞
        payment_id: ID –ø–ª–∞—Ç–µ–∂–∞
        receipt_text: –¢–µ–∫—Å—Ç —á–µ–∫–∞
        
    Returns:
        bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
    """
    cached_file_id = await get_file_id_for_payment(payment_id)
    if cached_file_id:
        await chat_id.answer_document(cached_file_id, caption=receipt_text)
        return True
    
    try:
        file_path = await get_filepath_project()
        docx = FSInputFile(file_path, filename='–ü—Ä–æ–µ–∫—Ç.docx')
        sent_message = await chat_id.answer_document(docx, caption=receipt_text)
        
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        try:
            os.remove(file_path)
        except OSError:
            pass
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ file_id –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        file_id = sent_message.document.file_id
        await set_file_id(payment_id, file_id)
        return True
        
    except Exception as e:
        await chat_id.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
        return False


@router_user.callback_query(F.data.startswith("check_current:"))
async def handle_current_payment(cb: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
    
    Args:
        cb: CallbackQuery –æ–±—ä–µ–∫—Ç
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    await cb.answer()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if await state.get_state() == PurchaseState.waiting_for_payment:
        await cb.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...")
        return

    await state.set_state(PurchaseState.waiting_for_payment)
    
    try:
        payment_id = cb.data.split(":")[1]
        status = await check_payment_status(payment_id)
        
        if status == "succeeded":
            payment = get_payment(payment_id)
            receipt_text = build_receipt_text(payment)
            await send_project_file(cb.message, payment_id, receipt_text)
        else:
            await cb.message.answer(f"–ó–∞–∫–∞–∑ {payment_id} –Ω–µ –æ–ø–ª–∞—á–µ–Ω.")
            
    finally:
        await state.clear()


@router_user.callback_query(F.data == "check_all_payments")
async def handle_all_payments(cb: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π
    
    Args:
        cb: CallbackQuery –æ–±—ä–µ–∫—Ç
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    await cb.answer()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if await state.get_state() == PurchaseState.waiting_for_payment:
        await cb.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...")
        return

    await state.set_state(PurchaseState.waiting_for_payment)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with async_session() as session:
            result = await session.execute(
                PaymentRecord.__table__.select()
                .where(PaymentRecord.user_id == cb.from_user.id)
                .order_by(PaymentRecord.id.desc())
            )
            payments = list(result.mappings())
        
        if not payments:
            await cb.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π.")
            return
        
        delivered_count = 0
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ø–ª–∞—Ç–µ–∂
        for payment in payments:
            payment_id = payment["payment_id"]
            status = await check_payment_status(payment_id)
            
            if status == "succeeded":
                payment_obj = get_payment(payment_id)
                receipt_text = build_receipt_text(payment_obj)
                
                if await send_project_file(cb.message, payment_id, receipt_text):
                    delivered_count += 1
        
        # –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if delivered_count > 0:
            await cb.message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {delivered_count} –ø—Ä–æ–µ–∫—Ç–æ–≤!")
        else:
            await cb.message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏.")
            
    finally:
        await state.clear()
"""
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã: —Å—Ç–∞—Ä—Ç, –æ–ø–ª–∞—Ç–∞ –∏–Ω–≤–æ–π—Å–æ–º, –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤.
"""
from aiogram import Router, F
from aiogram.types import (
    Message,
    FSInputFile,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    LabeledPrice,
    PreCheckoutQuery,
)
import os

from backend import get_filepath_project
from models import async_session, PaymentRecord
from settings import settings
from payments import (
    get_price_rub,
    set_file_id,
    get_file_id_for_payment,
    list_successful_payments,
)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
router_user = Router()
SUPPORT_LINK = settings.SUPPORT_LINK


async def build_payment_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
    
    Returns:
        InlineKeyboardMarkup: –ì–æ—Ç–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    """
    keyboard_buttons = [
        [InlineKeyboardButton(text=f"–û–ø–ª–∞—Ç–∏—Ç—å {get_price_rub()} ‚ÇΩ", callback_data="pay_invoice")],
        [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã", callback_data="check_all_payments")],
        [InlineKeyboardButton(text="–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", url=SUPPORT_LINK)],
    ]

    return InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)


@router_user.message(F.text == "/start")
async def handle_start(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    keyboard = await build_payment_keyboard()
    
    await message.answer(
        "üìö –ö—É—Ä—Å–æ–≤–æ–π –ø—Ä–æ–µ–∫—Ç –ø–æ –º–æ–¥—É–ª—é 8: '–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö'\n"
        "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–∫–ª–∞–¥–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è\n\n"
        "üîπ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é:\n"
        "- –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –§–ò–û –Ω–∞ —Ç–∏—Ç—É–ª—å–Ω–æ–º –ª–∏—Å—Ç–µ\n\n"
        "üí≥ –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –ø—Ä–æ–µ–∫—Ç –≤ —á–∞—Ç\n\n"
        "‚ùì –í–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã?\n"
        "–ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, –Ω–æ –ø—Ä–æ–µ–∫—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω - –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É",
        reply_markup=keyboard,
    )


async def send_project_file(
    message: Message,
    payment_id: str,
    receipt_text: str,
) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –≤ —á–∞—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è —Ñ–∞–π–ª
        payment_id: ID –ø–ª–∞—Ç–µ–∂–∞
        receipt_text: –¢–µ–∫—Å—Ç —á–µ–∫–∞
        
    Returns:
        bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
    """
    cached_file_id = await get_file_id_for_payment(payment_id)
    if cached_file_id:
        await message.answer_document(cached_file_id, caption=receipt_text)
        return True
    
    try:
        file_path = await get_filepath_project()
        docx = FSInputFile(file_path, filename='–ü—Ä–æ–µ–∫—Ç.docx')
        sent_message = await message.answer_document(docx, caption=receipt_text)
        
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        try:
            os.remove(file_path)
        except OSError:
            pass
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ file_id –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        file_id = sent_message.document.file_id
        await set_file_id(payment_id, file_id)
        return True
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
        return False


@router_user.callback_query(F.data == "pay_invoice")
async def handle_pay_invoice(cb: CallbackQuery) -> None:
    await cb.answer()
    prices = [LabeledPrice(label="–ü—Ä–æ–µ–∫—Ç", amount=int(get_price_rub()) * 100)]
    await cb.message.bot.send_invoice(
        chat_id=cb.message.chat.id,
        title="–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞",
        description="–ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–∞–Ω–Ω—ã—Ö",
        payload=f"user:{cb.from_user.id}",
        provider_token=settings.PROVIDER_TOKEN,
        currency="RUB",
        prices=prices,
        start_parameter="buy_project",
    )


@router_user.callback_query(F.data == "check_all_payments")
async def handle_all_payments(cb: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π
    
    Args:
        cb: CallbackQuery –æ–±—ä–µ–∫—Ç
    """
    await cb.answer()
    
    # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    payments = await list_successful_payments(cb.from_user.id)

    if not payments:
        await cb.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π.")
        return

    delivered_count = 0

    for payment in payments:
        payment_id = payment["payment_id"]
        receipt_text = f"–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram\nID: {payment_id}"
        if await send_project_file(cb.message, payment_id, receipt_text):
            delivered_count += 1

    if delivered_count > 0:
        await cb.message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {delivered_count} –ø—Ä–æ–µ–∫—Ç–æ–≤!")
    else:
        await cb.message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏.")


@router_user.pre_checkout_query()
async def handle_pre_checkout(pre_checkout_query: PreCheckoutQuery) -> None:
    await pre_checkout_query.answer(ok=True)


@router_user.message(F.successful_payment)
async def handle_successful_payment(message: Message) -> None:
    sp = message.successful_payment
    payment_id = sp.telegram_payment_charge_id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
    async with async_session() as session:
        session.add(
            PaymentRecord(
                user_id=message.from_user.id,
                payment_id=payment_id,
            )
        )
        await session.commit()

    amount_rub = sp.total_amount / 100
    receipt_text = (
        f"–°—É–º–º–∞: {amount_rub:.2f} ‚ÇΩ\n"
        f"ID: {payment_id}\n"
    )
    await send_project_file(message, payment_id, receipt_text)